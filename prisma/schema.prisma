generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Testimonial{
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String
  message     String
  isPublished Boolean
  createdAt   DateTime  @default(now()) 
}

model Teacher{
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name_ua     String
  name_en     String
  speciality  String
  imageUrl    String
  imageId     String
  linkedinLink String
  facebookLink String
  telegramLink String
  instagramLink String
  about_me    String
  about_help  String
  about_me_en    String
  about_help_en  String
  createdAt   DateTime  @default(now()) 
}

model Document{
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  fileName_ua    String
  fileName_en    String
  fileUrl        String
  fileId         String
  createdAt      DateTime  @default(now()) 
}

model Form{
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  formLink       String
  excelLink      String
  createdAt      DateTime  @default(now()) 
}

model Contacts{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  phone         String
  telegram      String
  instagram     String
  facebook      String
  createdAt     DateTime  @default(now()) 
}


model Course{
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  color          String
  descriptionUa  String
  descriptionEn  String
  tagsUa         String[]
  tagsEn         String[]
  courseDescriptionUa1 String
  courseDurationUa String
  courseDescriptionEn1 String
  courseDurationEn String
  startDateUa    String
  startDateEn    String
  priceUa        String
  priceEn        String
  fullpriceUa        String
  fullpriceEn        String
  numberOfPlacesUa String
  numberOfPlacesEn String
  experienceUa    String
  experienceEn    String
  languageLevelUa String
  languageLevelEn String
  timeForLearningUa String
  timeForLearningEn String
  forWhomTitleUa1     String
  forWhomTitleUa2     String
  forWhomDescriptionUa1     String
  forWhomDescriptionUa2     String
  forWhomTitleEn1     String
  forWhomTitleEn2     String
  forWhomDescriptionEn1     String
  forWhomDescriptionEn2     String
  themeTitleUa   String
  themeTitleEn   String
  themesUa       String[]
  themesEn       String[]
  faqUa          FAQUA[]
  faqEn          FAQEN[]
  teacherIds     String[]  @db.ObjectId 
  createdAt   DateTime  @default(now()) 
}



model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  hashedPassword String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  accounts      Account[]
}

type FAQUA  {
  questionUa String
  answerUa String
}

type FAQEN  {
  questionEn String
  answerEn String
}

model Partners {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  nameUa        String
  nameEn        String
  imageUrl    String
  imageId     String
  websiteLink String
  descriptionUa String
  descriptionEn String
  color  String
  createdAt   DateTime  @default(now()) 
}